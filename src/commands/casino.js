import { SlashCommandBuilder, EmbedBuilder, AttachmentBuilder } from 'discord.js';
import fs from 'fs';

/**
 * Commande principale du casino. Elle affiche un menu d'aperÃ§u des jeux disponibles et
 * inclut une image d'ambiance pour immerger les joueurs. Cette commande ne
 * gÃ¨re pas directement les jeux, elle redirige vers les autres commandes
 * spÃ©cifiques telles que /coinflip, /dice, /roulette, /bj et /pari.
 */
export const data = new SlashCommandBuilder()
  .setName('casino')
  .setDescription('Afficher le menu du casino avec les jeux disponibles');

export async function execute(interaction, db, config) {
  // Construire l'embed de prÃ©sentation du casino
  const embed = new EmbedBuilder()
    .setTitle('ðŸŽ° Bienvenue au GrokCasino')
    .setColor(COLORS.CASINO)
    .setDescription(
      'Choisissez votre jeu parmi les options ciâ€‘dessous. Utilisez les commandes correspondantes pour commencer Ã  jouer.\n\n' +
      '**/bj** â†’ Blackjack interactif avec boutons\n' +
      '**/coinflip** â†’ Pile ou face simple\n' +
      '**/dice** â†’ Pariez sur un nombre infÃ©rieur Ã  un seuil\n' +
      '**/roulette** â†’ Mise sur numÃ©ro, couleur ou paritÃ©\n' +
      '**/pari** â†’ Paris sportifs fictifs\n\n' +
      'Nâ€™oubliez pas : les jeux sont **provably fair** et les pertes sont plafonnÃ©es par jour.'
    )
    .addFields(
      { name: 'ðŸ’° Limites de mises', value: `Plafond quotidien des pertes : **${config.casino.daily_loss_cap_multiplier * 100}% de votre solde**`, inline: false },
      { name: 'ðŸ’¡ Astuce', value: 'Jouez rÃ©guliÃ¨rement pour dÃ©bloquer les rangs VIP et leurs bonus !', inline: false }
    );
  
  embed.setFooter({ text: 'ðŸŽ° GrokCasino â€¢ Jeu responsable' })
    .setTimestamp();
  // Joindre l'image du casino pour amÃ©liorer l'esthÃ©tique
  try {
    const imageBuffer = fs.readFileSync(new URL('../assets/casino.png', import.meta.url));
    const file = new AttachmentBuilder(imageBuffer, { name: 'casino.png' });
    embed.setImage('attachment://casino.png');
    return interaction.reply({ embeds: [embed], files: [file] });
  } catch (err) {
    // Si l'image ne peut Ãªtre lue (ex: fichier manquant), renvoyer sans fichier
    return interaction.reply({ embeds: [embed] });
  }
}